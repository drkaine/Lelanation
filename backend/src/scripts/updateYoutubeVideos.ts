import { YoutubeService } from "../service/YoutubeService";
import type { Video, ChannelInfo } from "../types";

interface UpdateResult {
  success: boolean;
  videosAdded: number;
  totalVideos: number;
  channelName: string;
  lastVideoDate: string;
}

/**
 * Met √† jour les vid√©os YouTube pour une cha√Æne sp√©cifique
 */
async function updateYoutubeVideos(channelId: string): Promise<UpdateResult> {
  const youtubeService = new YoutubeService();

  try {
    console.log(`üîÑ Mise √† jour des vid√©os pour la cha√Æne: ${channelId}`);

    // R√©cup√©rer les informations actuelles de la cha√Æne
    const channels = await youtubeService.getChannels();
    const channelInfo = channels.find(
      (c: ChannelInfo) => c.channelId === channelId,
    );

    if (!channelInfo) {
      throw new Error(`Cha√Æne ${channelId} non trouv√©e`);
    }

    const initialVideoCount = channelInfo.videoCount;
    console.log(`üìä √âtat initial: ${initialVideoCount} vid√©os`);

    // R√©cup√©rer les nouvelles vid√©os
    await youtubeService.fetchAndStoreVideos(channelId);

    // R√©cup√©rer les informations mises √† jour
    const updatedChannels = await youtubeService.getChannels();
    const updatedChannelInfo = updatedChannels.find(
      (c: ChannelInfo) => c.channelId === channelId,
    );

    if (!updatedChannelInfo) {
      throw new Error("Impossible de r√©cup√©rer les informations mises √† jour");
    }

    const videosAdded = updatedChannelInfo.videoCount - initialVideoCount;

    console.log(`‚úÖ Mise √† jour termin√©e:`);
    console.log(`   - Vid√©os ajout√©es: ${videosAdded}`);
    console.log(`   - Total vid√©os: ${updatedChannelInfo.videoCount}`);
    console.log(`   - Derni√®re vid√©o: ${updatedChannelInfo.lastVideoDate}`);

    return {
      success: true,
      videosAdded,
      totalVideos: updatedChannelInfo.videoCount,
      channelName: updatedChannelInfo.channelName,
      lastVideoDate: updatedChannelInfo.lastVideoDate,
    };
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour:`, error);
    return {
      success: false,
      videosAdded: 0,
      totalVideos: 0,
      channelName: "",
      lastVideoDate: "",
    };
  }
}

/**
 * Met √† jour toutes les cha√Ænes YouTube
 */
async function updateAllYoutubeChannels(): Promise<void> {
  const youtubeService = new YoutubeService();

  try {
    console.log("üé¨ Mise √† jour de toutes les cha√Ænes YouTube...");

    const channels = await youtubeService.getChannels();
    console.log(`üìã ${channels.length} cha√Ænes trouv√©es`);

    const results: UpdateResult[] = [];

    for (const channel of channels) {
      console.log(`\n--- ${channel.channelName} ---`);
      const result = await updateYoutubeVideos(channel.channelId);
      results.push(result);

      // Pause entre les cha√Ænes pour √©viter de d√©passer les quotas
      if (channels.length > 1) {
        console.log("‚è≥ Pause de 2 secondes...");
        await new Promise((resolve) => setTimeout(resolve, 2000));
      }
    }

    // R√©sum√© final
    console.log("\nüìä R√©sum√© de la mise √† jour:");
    results.forEach((result, index) => {
      const status = result.success ? "‚úÖ" : "‚ùå";
      console.log(
        `${status} ${channels[index].channelName}: ${result.videosAdded} vid√©os ajout√©es`,
      );
    });

    const totalVideosAdded = results.reduce(
      (sum, result) => sum + result.videosAdded,
      0,
    );
    console.log(`\nüéâ Total: ${totalVideosAdded} vid√©os ajout√©es`);
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour globale:", error);
    throw error;
  }
}

/**
 * Affiche les statistiques des cha√Ænes YouTube
 */
async function displayYoutubeStats(): Promise<void> {
  const youtubeService = new YoutubeService();

  try {
    console.log("üìä Statistiques des cha√Ænes YouTube:");

    const channels = await youtubeService.getChannels();

    if (channels.length === 0) {
      console.log("‚ùå Aucune cha√Æne trouv√©e");
      return;
    }

    for (const channel of channels) {
      console.log(`\nüì∫ ${channel.channelName}:`);
      console.log(`   - ID: ${channel.channelId}`);
      console.log(`   - Vid√©os: ${channel.videoCount}`);
      console.log(`   - Compl√®te: ${channel.isComplete ? "‚úÖ OUI" : "‚ùå NON"}`);
      console.log(`   - Derni√®re vid√©o: ${channel.lastVideoDate}`);
      console.log(
        `   - Derni√®re mise √† jour: ${new Date(channel.lastUpdate).toLocaleString("fr-FR")}`,
      );

      // Afficher les 3 derni√®res vid√©os
      const videos = await youtubeService.getVideosByChannel(channel.channelId);
      if (videos.length > 0) {
        console.log(`   - 3 derni√®res vid√©os:`);
        videos.slice(0, 3).forEach((video: Video, index: number) => {
          const date = new Date(video.snippet.publishedAt);
          console.log(`     ${index + 1}. ${video.snippet.title}`);
          console.log(
            `        ${date.toLocaleDateString("fr-FR")} ${date.toLocaleTimeString("fr-FR")}`,
          );
        });
      }
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de l'affichage des statistiques:", error);
    throw error;
  }
}

// Point d'entr√©e principal
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case "update": {
      const channelId = args[1];
      if (channelId) {
        updateYoutubeVideos(channelId)
          .then((result) => {
            if (result.success) {
              console.log("‚úÖ Mise √† jour termin√©e avec succ√®s");
              process.exit(0);
            } else {
              console.log("‚ùå Mise √† jour √©chou√©e");
              process.exit(1);
            }
          })
          .catch((error) => {
            console.error("üí• Erreur:", error);
            process.exit(1);
          });
      } else {
        updateAllYoutubeChannels()
          .then(() => {
            console.log("‚úÖ Mise √† jour globale termin√©e");
            process.exit(0);
          })
          .catch((error) => {
            console.error("üí• Erreur:", error);
            process.exit(1);
          });
      }
      break;
    }

    case "stats":
      displayYoutubeStats()
        .then(() => {
          console.log("‚úÖ Affichage des statistiques termin√©");
          process.exit(0);
        })
        .catch((error) => {
          console.error("üí• Erreur:", error);
          process.exit(1);
        });
      break;

    default:
      console.log("üìñ Utilisation:");
      console.log(
        "  npm run youtube:update [channelId]  - Mettre √† jour une cha√Æne ou toutes les cha√Ænes",
      );
      console.log(
        "  npm run youtube:stats               - Afficher les statistiques",
      );
      process.exit(0);
  }
}

export { updateYoutubeVideos, updateAllYoutubeChannels, displayYoutubeStats };
