interface StructuredDataValidation {
  jsonLdCount: number
  microdataFound: boolean
  rdfaFound: boolean
  openGraphFound: boolean
  issues: string[]
  recommendations: string[]
}

async function validateStructuredDataFormats(): Promise<StructuredDataValidation> {
  console.log('üîç Validation des formats de donn√©es structur√©es...\n')
  
  const result: StructuredDataValidation = {
    jsonLdCount: 0,
    microdataFound: false,
    rdfaFound: false,
    openGraphFound: false,
    issues: [],
    recommendations: []
  }
  
  try {
    const response = await fetch('https://www.lelanation.fr/')
    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`)
    }
    
    const html = await response.text()
    
    const jsonLdMatches = html.match(/<script[^>]*type=["']application\/ld\+json["'][^>]*>/gi)
    result.jsonLdCount = jsonLdMatches ? jsonLdMatches.length : 0
    
    const microdataPatterns = [
      /itemscope/gi,
      /itemtype/gi,
      /itemprop/gi
    ]
    
    result.microdataFound = microdataPatterns.some(pattern => pattern.test(html))
    
    const rdfaPatterns = [
      /typeof=/gi,
      /property=(?!["']og:)/gi, 
      /resource=/gi,
      /vocab=/gi
    ]
    
    result.rdfaFound = rdfaPatterns.some(pattern => pattern.test(html))
    
    result.openGraphFound = /property=["']og:/gi.test(html)
    
    const fs = await import('fs/promises')
    
    const indexHtml = await fs.readFile('./public/index.html', 'utf-8')
    const staticJsonLd = indexHtml.includes('application/ld+json')
    
    if (staticJsonLd) {
      result.issues.push('JSON-LD statique trouv√© dans public/index.html')
      result.recommendations.push('Supprimer le JSON-LD statique de public/index.html')
    }
    
    try {
      const seoLayoutCode = await fs.readFile('./src/components/SEO/SEOLayout.vue', 'utf-8')
      const hasMicrodata = seoLayoutCode.includes('itemscope') || 
                          seoLayoutCode.includes('itemtype') || 
                          seoLayoutCode.includes('itemprop')
      
      if (hasMicrodata) {
        result.issues.push('Attributs Microdata trouv√©s dans SEOLayout.vue')
        result.recommendations.push('Supprimer les attributs itemscope, itemtype, itemprop de SEOLayout.vue')
      }
    } catch (error) {
      console.log(error)
    }
    
    if (result.jsonLdCount > 3) {
      result.issues.push(`Trop de blocs JSON-LD (${result.jsonLdCount}), risque de duplication`)
      result.recommendations.push('Consolider les donn√©es structur√©es JSON-LD')
    }
    
    if (result.microdataFound) {
      result.issues.push('Microdata d√©tect√© en conflit avec JSON-LD')
      result.recommendations.push('Supprimer tous les attributs Microdata (itemscope, itemtype, itemprop)')
    }
    
    if (result.rdfaFound) {
      result.issues.push('RDFa d√©tect√© en conflit avec JSON-LD')
      result.recommendations.push('Supprimer tous les attributs RDFa (typeof, property, resource, vocab)')
    }
    
    return result
    
  } catch (error) {
    throw new Error(`Erreur lors de la validation: ${error}`)
  }
}

async function main() {
  console.log('üöÄ Validation des Formats de Donn√©es Structur√©es\n')
  console.log('='.repeat(60))
  
  try {
    const validation = await validateStructuredDataFormats()
    
    console.log('üìä R√©sultats de la validation:\n')
    
    console.log(`‚úÖ Blocs JSON-LD d√©tect√©s: ${validation.jsonLdCount}`)
    console.log(`${validation.microdataFound ? '‚ùå' : '‚úÖ'} Microdata: ${validation.microdataFound ? 'D√©tect√©' : 'Absent'}`)
    console.log(`${validation.rdfaFound ? '‚ùå' : '‚úÖ'} RDFa: ${validation.rdfaFound ? 'D√©tect√©' : 'Absent'}`)
    console.log(`‚ÑπÔ∏è  OpenGraph: ${validation.openGraphFound ? 'Pr√©sent' : 'Absent'} (compatible)`)
    
    if (validation.issues.length > 0) {
      console.log('\nüîß Probl√®mes d√©tect√©s:')
      validation.issues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue}`)
      })
    }
    
    if (validation.recommendations.length > 0) {
      console.log('\nüí° Recommandations:')
      validation.recommendations.forEach(rec => {
        console.log(`   ‚Ä¢ ${rec}`)
      })
    } else {
      console.log('\nüéâ Format JSON-LD unique correctement impl√©ment√©!')
    }
    
    console.log('\nüìã Format recommand√©:')
    console.log('   ‚úÖ JSON-LD uniquement pour les donn√©es structur√©es')
    console.log('   ‚úÖ OpenGraph pour les r√©seaux sociaux (compatible)')
    console.log('   ‚úÖ Meta tags classiques pour les moteurs de recherche')
    console.log('   ‚ùå Pas de Microdata (itemscope, itemtype, itemprop)')
    console.log('   ‚ùå Pas de RDFa (typeof, property, resource, vocab)')
    
    if (validation.issues.length > 0) {
      console.log('\n‚ùå Validation √©chou√©e: Conflits de formats d√©tect√©s')
      process.exit(1)
    } else {
      console.log('\n‚úÖ Validation r√©ussie: Format JSON-LD unique!')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la validation:', error)
    process.exit(1)
  }
}

main() 